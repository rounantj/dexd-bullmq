import { Worker, Job } from "bullmq";
import axios from "axios";
import { redisConnection } from "../config/redis";
import { VideoProcessingJobData } from "../queues/videoProcessingQueue";
import OpenAI from "openai";

const MODEL_SELECTED = "gpt-4o-mini";

// Inicializar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Detecta qual plataforma o link pertence usando OpenAI
 */
async function detectVideoPlatform(link: string): Promise<string> {
  try {
    const prompt = `Detecte qual plataforma o link pertence e devolva apenas a palavra correspondente a plataforma sendo possiveis: tiktok, instagram, facebook, youtube-shorts, youtube, outros. Link: ${link}`;

    const response = await openai.chat.completions.create({
      model: MODEL_SELECTED,
      messages: [{ role: "system", content: prompt }],
      temperature: 0,
      max_tokens: 100,
    });

    return (
      response.choices[0].message.content?.toLowerCase().trim() || "outros"
    );
  } catch (error) {
    console.error("‚ùå [Worker]: Error detecting platform:", error);
    return "outros";
  }
}

/**
 * Extrai ID do v√≠deo do YouTube
 */
function extractYouTubeVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,
    /youtube\.com\/shorts\/([^&\n?#]+)/,
    /youtube\.com\/watch\?.*v=([^&\n?#]+)/,
  ];

  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match && match[1]) {
      return match[1];
    }
  }

  return null;
}

/**
 * Busca metadados do YouTube usando a API oficial do Google
 */
async function fetchYouTubeMetadata(url: string): Promise<any> {
  try {
    const videoId = extractYouTubeVideoId(url);
    if (!videoId) {
      console.warn("‚ö†Ô∏è [Worker]: Could not extract YouTube video ID");
      return null;
    }

    const apiKey = process.env.GOOGLE_API_KEY;
    if (!apiKey) {
      console.warn("‚ö†Ô∏è [Worker]: GOOGLE_API_KEY not found");
      return null;
    }

    const apiUrl = new URL("https://www.googleapis.com/youtube/v3/videos");
    apiUrl.searchParams.append("part", "snippet,statistics,contentDetails");
    apiUrl.searchParams.append("id", videoId);
    apiUrl.searchParams.append("key", apiKey);

    const response = await axios.get(apiUrl.toString());

    if (response.data?.items && response.data.items.length > 0) {
      const video = response.data.items[0];
      const snippet = video.snippet;
      const statistics = video.statistics;
      const contentDetails = video.contentDetails;

      console.log(
        `‚úÖ [Worker]: YouTube metadata fetched for video: ${snippet.title}`
      );

      return {
        id: video.id,
        title: snippet.title,
        description: snippet.description,
        channelTitle: snippet.channelTitle,
        publishedAt: snippet.publishedAt,
        thumbnails: snippet.thumbnails,
        tags: snippet.tags || [],
        categoryId: snippet.categoryId,
        duration: contentDetails.duration,
        viewCount: statistics.viewCount || "0",
        likeCount: statistics.likeCount || "0",
        commentCount: statistics.commentCount || "0",
      };
    }

    return null;
  } catch (error) {
    console.error("‚ùå [Worker]: Error fetching YouTube metadata:", error);
    return null;
  }
}

/**
 * Busca metadados do v√≠deo com base na plataforma
 */
async function getVideoMetadata(link: string): Promise<any> {
  const platform = await detectVideoPlatform(link);
  console.log(`üì± [Worker]: Platform detected: ${platform}`);

  let videoMetadata: any = {
    platform,
    url: link,
    title: null,
    description: null,
    tags: [],
  };

  // Buscar metadados espec√≠ficos da plataforma
  if (platform === "youtube" || platform === "youtube-shorts") {
    const youtubeData = await fetchYouTubeMetadata(link);
    if (youtubeData) {
      videoMetadata = {
        ...videoMetadata,
        ...youtubeData,
      };
    }
  }

  // Tentar buscar conte√∫do da p√°gina como fallback
  try {
    const response = await axios.get(link, {
      timeout: 10000,
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
      },
    });
    videoMetadata.pageContent = response.data;
  } catch (error) {
    console.warn("‚ö†Ô∏è [Worker]: Could not fetch page content");
  }

  return videoMetadata;
}

function extractAllLinksFromText(text: string): string[] {
  if (!text) return [];
  const urlRegex = /(https?:\/\/[^\s<>"{}|\\^`\[\]]+)/gi;
  return text.match(urlRegex) || [];
}

function isProductLink(url: string): boolean {
  try {
    const urlObj = new URL(url);
    const hostname = urlObj.hostname.toLowerCase();
    const pathname = urlObj.pathname.toLowerCase();
    const searchParams = urlObj.searchParams.toString().toLowerCase();

    // Excluir dom√≠nios de imagens/thumbnails do YouTube e outros servi√ßos de imagem
    const imageOnlyDomains = [
      "yt3.ggpht.com",
      "yt3.googleusercontent.com",
      "i.ytimg.com",
      "img.youtube.com",
      "ytimg.googleusercontent.com",
    ];

    // Excluir links de grupos de WhatsApp e Telegram
    const socialGroupDomains = [
      "whatsapp.com",
      "wa.me",
      "chat.whatsapp.com",
      "api.whatsapp.com",
      "t.me",
      "telegram.me",
      "telegram.org",
    ];

    if (imageOnlyDomains.some((domain) => hostname.includes(domain))) {
      return false;
    }

    if (socialGroupDomains.some((domain) => hostname.includes(domain))) {
      return false;
    }

    // Lista de dom√≠nios de e-commerce conhecidos
    const productDomains = [
      "amazon",
      "mercadolivre",
      "mercadolibre",
      "magalu",
      "magazineluiza",
      "americanas",
      "submarino",
      "shopee",
      "aliexpress",
      "shein",
      "kabum",
      "amzn.to",
      "amzn.com",
      "netshoes",
      "dafiti",
      "zattini",
      "walmart",
      "carrefour",
      "hotmart",
      "eduzz",
      "monetizze",
      "pichau",
      "terabyteshop",
    ];

    // Verificar se √© um dom√≠nio de produto conhecido
    if (productDomains.some((domain) => hostname.includes(domain))) {
      return true;
    }

    // Verificar se √© um link encurtado (muitos links de produtos s√£o encurtados)
    const shortenedLinkDomains = [
      "bit.ly",
      "tinyurl.com",
      "goo.gl",
      "t.co",
      "ow.ly",
      "is.gd",
      "buff.ly",
      "adf.ly",
    ];
    if (shortenedLinkDomains.some((domain) => hostname.includes(domain))) {
      return true;
    }

    // Palavras-chave que indicam produto
    const productKeywords = [
      "product",
      "produto",
      "item",
      "buy",
      "comprar",
      "purchase",
      "shop",
      "loja",
      "store",
      "cart",
      "carrinho",
      "checkout",
      "dp/",
      "gp/product",
    ];

    // Verificar se a URL cont√©m palavras-chave de produto
    const hasProductKeyword = productKeywords.some(
      (keyword) => pathname.includes(keyword) || searchParams.includes(keyword)
    );

    // Verificar se tem par√¢metros t√≠picos de e-commerce/afiliados
    const hasEcommerceParams = [
      "ref=",
      "tag=",
      "camp=",
      "link=",
      "affiliate=",
      "partner=",
    ].some((param) => searchParams.includes(param));

    return hasProductKeyword || hasEcommerceParams;
  } catch {
    return false;
  }
}

function extractAllProductLinksDirectly(
  videoLink: string,
  videoMetadata: any
): any[] {
  const allLinks: any[] = [];

  // Extrair links da descri√ß√£o (vem da API do YouTube)
  if (videoMetadata?.description) {
    const links = extractAllLinksFromText(videoMetadata.description);
    allLinks.push(
      ...links.map((link) => ({
        url: link,
        source: "description",
        confidence: 0.9,
        isProduct: isProductLink(link),
      }))
    );
  }

  // Extrair links do conte√∫do da p√°gina
  if (videoMetadata?.pageContent) {
    const pageText =
      typeof videoMetadata.pageContent === "string"
        ? videoMetadata.pageContent
        : JSON.stringify(videoMetadata.pageContent);
    const links = extractAllLinksFromText(pageText);

    allLinks.push(
      ...links.map((link) => ({
        url: link,
        source: "page",
        confidence: 0.7,
        isProduct: isProductLink(link),
      }))
    );
  }

  const seen = new Set();
  const unique = allLinks.filter((link) => {
    const normalized = link.url.toLowerCase();
    if (seen.has(normalized)) return false;
    seen.add(normalized);
    return true;
  });

  const productLinks = unique.filter((l) => l.isProduct);
  console.log(`‚úÖ [Worker]: Found ${productLinks.length} product links`);

  return productLinks;
}

function extractProductNameFromUrl(url: string): string {
  try {
    const urlObj = new URL(url);
    const pathname = urlObj.pathname;
    const segments = pathname.split("/").filter((s) => s.length > 0);
    if (segments.length > 0) {
      return segments[segments.length - 1]
        .replace(/-/g, " ")
        .replace(/\b\w/g, (l) => l.toUpperCase());
    }
    return "Produto";
  } catch {
    return "Produto";
  }
}

async function extractTitlesFromLinksWithAI(
  links: any[],
  videoMetadata: any
): Promise<any[]> {
  if (links.length === 0) return [];

  try {
    const linksInfo = links.map((link, index) => ({
      id: index + 1,
      url: link.url,
      source: link.source,
    }));

    // Incluir a descri√ß√£o completa se dispon√≠vel
    const fullDescription = videoMetadata?.description || "";

    const prompt = `Analise a DESCRI√á√ÉO DO V√çDEO e correlacione cada link encontrado com o nome/t√≠tulo do produto que aparece ACIMA ou PR√ìXIMO de cada link na descri√ß√£o.

DESCRI√á√ÉO COMPLETA DO V√çDEO:
${fullDescription.substring(0, 3000)}

LINKS PARA CORRELACIONAR:
${JSON.stringify(linksInfo, null, 2)}

INSTRU√á√ïES IMPORTANTES:
1. Na descri√ß√£o, cada produto geralmente tem um N√öMERO, NOME DO PRODUTO e depois o LINK
2. Exemplo: "1. Eufy Self Emptying Robot Vacuum" seguido de "https://bit.ly/42NecTd"
3. Correlacione cada link com o nome que aparece IMEDIATAMENTE ANTES dele na descri√ß√£o
4. Use EXATAMENTE o nome que est√° na descri√ß√£o, n√£o invente ou altere
5. Se n√£o encontrar nome espec√≠fico, use um nome descritivo baseado no contexto
6. N√ÉO use t√≠tulos gen√©ricos como "Product Title X"

RETORNE UM JSON com esta estrutura:
{
  "links": [
    {
      "id": 1,
      "url": "https://bit.ly/...",
      "title": "Nome EXATO extra√≠do da descri√ß√£o",
      "type": "product",
      "description": "Breve descri√ß√£o do produto"
    }
  ]
}

REGRAS:
- Use os nomes EXATOS da descri√ß√£o
- Se o nome tiver n√∫mero (ex: "1. Nome"), remova o n√∫mero
- Seja preciso na correla√ß√£o link <-> nome`;

    const response = await openai.chat.completions.create({
      model: MODEL_SELECTED,
      messages: [
        {
          role: "system",
          content:
            "Voc√™ √© um especialista em extrair informa√ß√µes estruturadas de descri√ß√µes de v√≠deos. Sua especialidade √© correlacionar links com os nomes de produtos que aparecem na descri√ß√£o.",
        },
        { role: "user", content: prompt },
      ],
      response_format: { type: "json_object" },
      temperature: 0.1,
      max_tokens: 5000,
    });

    const content = response.choices[0].message.content || "{}";
    const result = JSON.parse(content);

    return links.map((link, index) => {
      const aiResult = result.links?.find((l: any) => l.id === index + 1);
      return {
        ...link,
        productName: aiResult?.title || extractProductNameFromUrl(link.url),
        type: aiResult?.type || "product",
        description: aiResult?.description || "",
      };
    });
  } catch (error) {
    console.error("‚ùå [Worker]: Error extracting titles:", error);
    return links.map((link) => ({
      ...link,
      productName: extractProductNameFromUrl(link.url),
      type: "product",
      description: "",
    }));
  }
}

async function analyzeVideoContentWithAI(
  videoMetadata: any,
  videoLink: string
): Promise<any> {
  try {
    const allExtractedLinks = extractAllProductLinksDirectly(
      videoLink,
      videoMetadata
    );
    const linksWithTitles = await extractTitlesFromLinksWithAI(
      allExtractedLinks,
      videoMetadata
    );

    // Se j√° temos metadados da API do YouTube, usar eles e complementar com IA
    const hasYouTubeData = videoMetadata?.title && videoMetadata?.description;

    if (hasYouTubeData) {
      console.log(
        "‚úÖ [Worker]: Using YouTube API metadata + AI for tags and summary"
      );

      // Usar IA para gerar tags e resumo conciso
      const summaryPrompt = `Analise este v√≠deo do YouTube e gere:
1. Um resumo CONCISO e ATRATIVO da descri√ß√£o (m√°ximo 200 caracteres)
2. Exatamente 10 tags relevantes em portugu√™s

T√≠tulo: ${videoMetadata.title}
Descri√ß√£o: ${videoMetadata.description?.substring(0, 1500)}
Canal: ${videoMetadata.channelTitle || "Desconhecido"}

Retorne JSON:
{
  "summary": "Resumo conciso e atrativo do v√≠deo em at√© 200 caracteres",
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5", "tag6", "tag7", "tag8", "tag9", "tag10"]
}

Regras para o resumo:
- M√°ximo 200 caracteres
- Conciso e direto
- Capture a ess√™ncia do v√≠deo
- Use linguagem atrativa
- Foque no conte√∫do principal

Regras para tags:
- Exatamente 10 tags
- Tags em portugu√™s brasileiro
- Tags relevantes ao conte√∫do`;

      const summaryResponse = await openai.chat.completions.create({
        model: MODEL_SELECTED,
        messages: [
          {
            role: "system",
            content: "Voc√™ √© especialista em categoriza√ß√£o e resumo de v√≠deos.",
          },
          { role: "user", content: summaryPrompt },
        ],
        response_format: { type: "json_object" },
        temperature: 0.3,
        max_tokens: 800,
      });

      const aiResult = JSON.parse(
        summaryResponse.choices[0].message.content || "{}"
      );

      const videoInfo: any = {
        title: videoMetadata.title,
        description: aiResult.summary || videoMetadata.title,
        fullDescription: videoMetadata.description,
        platform: videoMetadata.platform,
        thumbnail:
          videoMetadata.thumbnails?.high?.url ||
          videoMetadata.thumbnails?.default?.url ||
          null,
        duration: videoMetadata.duration || null,
        category: "V√≠deo",
        tags: aiResult.tags || [
          "video",
          "conteudo",
          "midia",
          "digital",
          "importado",
          "automatico",
          "social",
          "plataforma",
          "compartilhamento",
          "online",
        ],
        language: "pt-BR",
        author: videoMetadata.channelTitle || "Desconhecido",
        price: 0,
        isEducational: false,
        targetAudience: "Geral",
        mainTopic: videoMetadata.title || "Conte√∫do de v√≠deo",
        hasProductMentions: linksWithTitles.length > 0,
        contentType: "other",
        productAnalysis: {
          hasProducts: linksWithTitles.length > 0,
          productLinks: linksWithTitles.map((link: any) => link.url),
          productsInfo: [...linksWithTitles],
          totalFound: linksWithTitles.length,
        },
      };

      return videoInfo;
    }

    // Se n√£o tem dados da API, usar IA completa
    console.log("‚ö†Ô∏è [Worker]: No YouTube data, using full AI analysis");

    const prompt = `Analise este link de v√≠deo: ${videoLink}
Plataforma: ${videoMetadata.platform}

RETORNE UM JSON:
{
  "title": "T√≠tulo do v√≠deo",
  "description": "Descri√ß√£o detalhada",
  "platform": "youtube|tiktok|instagram|facebook|other",
  "thumbnail": null,
  "duration": null,
  "category": "Categoria",
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5", "tag6", "tag7", "tag8", "tag9", "tag10"],
  "language": "pt-BR",
  "author": "Nome do autor",
  "price": 0,
  "isEducational": false,
  "targetAudience": "P√∫blico-alvo",
  "mainTopic": "T√≥pico principal",
  "hasProductMentions": false,
  "contentType": "tutorial|review|entertainment|educational|promotional|other"
}

Sempre inclua exatamente 10 tags relevantes.`;

    const response = await openai.chat.completions.create({
      model: MODEL_SELECTED,
      messages: [
        {
          role: "system",
          content: "Voc√™ √© especialista em an√°lise de v√≠deos.",
        },
        { role: "user", content: prompt },
      ],
      response_format: { type: "json_object" },
      temperature: 0,
      max_tokens: 4000,
    });

    const videoInfo: any = JSON.parse(
      response.choices[0].message.content || "{}"
    );

    videoInfo.productAnalysis = {
      hasProducts: linksWithTitles.length > 0,
      productLinks: linksWithTitles.map((link: any) => link.url),
      productsInfo: [...linksWithTitles],
      totalFound: linksWithTitles.length,
    };

    return videoInfo;
  } catch (error) {
    console.error("‚ùå [Worker]: Error analyzing video:", error);
    return {
      title: videoMetadata?.title || `V√≠deo de ${new URL(videoLink).hostname}`,
      description:
        videoMetadata?.description || "V√≠deo importado automaticamente",
      platform: videoMetadata?.platform || "outros",
      thumbnail: videoMetadata?.thumbnails?.high?.url || null,
      duration: null,
      category: "Geral",
      tags: [
        "video",
        "conteudo",
        "midia",
        "digital",
        "importado",
        "automatico",
        "social",
        "plataforma",
        "compartilhamento",
        "online",
      ],
      language: "pt-BR",
      author: videoMetadata?.channelTitle || "Desconhecido",
      price: 0,
      isEducational: false,
      targetAudience: "Geral",
      mainTopic: "Conte√∫do de v√≠deo",
      hasProductMentions: false,
      contentType: "other",
      productAnalysis: {
        hasProducts: false,
        productLinks: [],
        productsInfo: [],
        totalFound: 0,
      },
    };
  }
}

async function processVideoWithLLM(data: VideoProcessingJobData): Promise<any> {
  console.log(`\nüé¨ [Worker]: Processing video with LLM...`);
  console.log(`   Link: ${data.videoLink}`);
  console.log(`   User: ${data.userId}`);

  const videoMetadata = await getVideoMetadata(data.videoLink);
  const videoInfo = await analyzeVideoContentWithAI(
    videoMetadata,
    data.videoLink
  );

  console.log(`‚úÖ [Worker]: Analysis completed!`);
  console.log(`   Title: ${videoInfo.title}`);
  console.log(`   Tags: ${videoInfo.tags?.length || 0}`);
  console.log(
    `   Products: ${videoInfo.productAnalysis?.productsInfo?.length || 0}`
  );

  return { videoInfo, videoLink: data.videoLink, userId: data.userId };
}

export const videoProcessingWorker = new Worker<VideoProcessingJobData>(
  "video-processing-queue",
  async (job: Job<VideoProcessingJobData>) => {
    console.log(
      `üîÑ [Worker]: Processing job ${job.id} (Attempt ${job.attemptsMade + 1})`
    );

    const result = await processVideoWithLLM(job.data);
    return { success: true, timestamp: new Date().toISOString(), result };
  },
  { connection: redisConnection, concurrency: 2 }
);

videoProcessingWorker.on("completed", (job) => {
  console.log(`‚ú® [Worker]: Job ${job.id} completed!`);
});

videoProcessingWorker.on("failed", (job, err) => {
  console.error(`üí• [Worker]: Job ${job?.id} failed:`, err.message);
});

console.log(
  "üé¨ Video Processing Worker started with LLM + YouTube API support!"
);
